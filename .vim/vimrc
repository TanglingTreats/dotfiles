" Remap leader key
:let mapleader = "\<Space>"

set nocompatible
filetype off

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
"set rtp+=~/.vim/bundle/Vundle.vim
call plug#begin('~/.vim/plugged')

" Better Git integration within vim
Plug 'tpope/vim-fugitive'

" Gruvbox color scheme
Plug 'morhetz/gruvbox'

" vim-airline for status
"Plug 'vim-airline/vim-airline'
"Plug 'vim-airline/vim-airline-themes'

" Autocomplete
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Fuzzy file finder
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

call plug#end()

"colorscheme wal
set bg=dark
let g:gruvbox_contrast_dark = 'medium'
colorscheme gruvbox

" General settings
syntax on
set hlsearch
set incsearch
set number
set relativenumber

" Allow hidden buffers with existing changes
set hidden

setlocal foldmethod=syntax
set foldnestmax=10
set nofoldenable
set foldlevel=2

let g:netrw_is_open=0

function! ToggleNetrw()
    if g:netrw_is_open
        let i = bufnr("$")
        while (i >= 1)
            if (getbufvar(i, "&filetype") == "netrw")
                silent exe "bwipeout " . i 
            endif
            let i-=1
        endwhile
        let g:NetrwIsOpen=0
    else
        let g:NetrwIsOpen=1
        silent Lexplore
    endif
endfunction
nnoremap <leader>e :call ToggleNetrw()  <CR>

" Netrw settings for pleasant looks
"let g:netrw_banner=0
let g:netrw_liststyle=3
let g:netrw_browse_split=4
let g:netrw_altv=1
let g:netrw_winsize=25
"augroup ProjectDrawer
"    autocmd!
"    autocmd VimEnter * :Vexplore
"augroup END

" Set indent settings
filetype plugin indent on
" Show existing tab with 4 spaces
set tabstop=2
" When indenting with '>', use 4 spaces
set shiftwidth=2
" On pressing 'Tab', insert 4 spaces
set expandtab

set colorcolumn=80

map <F6> :setlocal spell! spelllang=en_gb<CR>
:nnoremap <silent> <Bslash> :nohlsearch<Bar>:echo<CR>

" Use Tab for trigger completion
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <CR> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif
" Map CoC keys
nmap <leader>gd <Plug>(coc-definition)
nmap <leader>gr <Plug>(coc-references)
nmap <leader>gy <Plug>(coc-type-definition)
nmap <leader>gi <Plug>(coc-implementation)


" Refresh coc tags
if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
else
    inoremap <silent><expr> <c-@> coc#refresh()
endif

" Show files in directory
nnoremap <C-p> :GFiles<CR>

